proc AddNames(string $name)
{
	print $names;
} 

AddNames({"Joe", "Tom", "Steve"});

proc AddNumbers(int $numbers)
{
	print $numbers;
} 

int $numbers = {1,2,3,4,5};

//Classroom Examples

AddNumbers({$numbers});

int $num = 5;

print ($num + "/n")

//$num = $num + 6;
$num *= 8;

print ($num + "\n");

//
int $num1 = 5;
int $num2 = 6;

print ("Num1: " + $num1 + "Num2: " + $num2 + "\n");

$num1++
++$num2;

print ("Num1: " + $num1 + "Num2: " + $num2 + "\n");

print ($num + "\n")

//For Loops

/* 
The for loop:
outline of the functionality of a for loop
for(initialixation; condition //test; increment //Change of condition)
{
	//Code Block
}
*/

//Most Basic Example

for($i = 0; $i < 10; $i++)
{
	//print "hi"
	print($i + "\n");
}

//For loops with Arrays

string $names [] = {"Joe", "Bob"};

for($i=0; $i<size($names); i++)
{
	print ($names[$i] + "\n");
}

//For Each Loops
//Mel it is called an For In Loops

/*
for $variable in $array
{
	//Code Block

}
*/

string $names [] = {"Joe", "Bob", "Stan", "Jeff"};

for ($j in $names)//Already sets up the conditions for the regular for loop *See line 88 for a copy what it does for you
{
	print ($j + "\n");
}
//Usefull for steping through each element
//
for ($i=0; $i<size($names); $i++)
{
	string $j = $names[$i];
	print ($j + "\n");
}
//Better for counting

//While Loops

/*
while(Condition)
{
	CodeBlock
}
*/

int $i = 0;

while ($i < 10)
{
	/*
	$i++;
	if ($i == 5)
	{
		continue;
	}
	print ($i + "\n")
	*/
		
	print ($i + "\n")
	$i++;
	
	/*
	if ($i == 5)
	{
		break;
	}
	*/
}

//Do While Loops

do
{
	print ($i + "/n");
	$i++;
}	while ($i<5);

//Sum Function that we started with
proc Add(float $num1, float $num2)
{
	float $sum = $num1 + $num2;
	return $sum;
}

//Sum function that would allow for 
proc Add(float $numbers[];) //3,5,2
{
	float $sum = 0;
	
	for($i=0; $i<size($numbers); $i++)//Powers could be represented using a for loop
	{
		$sum += $numbers[$i]; //Sum becomes 3, then 8, then
	}
	return $sum;
	/*
	float $sum = $num1 + $num2;
	return $sum;
	*/
}

Add({2,35,34,23,5,31,35,6,3});

int $something = Add({2,35,34,23,5,31,35,6,3});
print $something;




















